package com.github.winteryoung.yanwte

import com.github.winteryoung.yanwte.internals.AutoGeneratedExtensionSpace
import com.github.winteryoung.yanwte.internals.ExtensionPoint
import com.github.winteryoung.yanwte.internals.YanwteExtension
import com.github.winteryoung.yanwte.internals.bytecode.generateExtensionPointDelegate
import com.github.winteryoung.yanwte.internals.utils.onNull
import com.google.common.cache.Cache
import com.google.common.cache.CacheBuilder
import java.util.concurrent.ConcurrentHashMap

/**
 * YanwteContainer registers extensions, extension points, namespaces, and keep track of the relations between them.
 *
 * @author Winter Young
 * @since 2016/1/19
 */
object YanwteContainer {
    /**
     * Extension name to instance map.
     */
    private val nameToExtension = ConcurrentHashMap<String, YanwteExtension>()

    /**
     * Extension point name to instance map.
     */
    private val nameToExtPoint = ConcurrentHashMap<String, ExtensionPoint>()

    /**
     * Two level map. Data extension point -> extension space name -> data extension.
     */
    private val dataExtensionCache: Cache<Any, ConcurrentHashMap<String, Any>> =
            CacheBuilder.newBuilder().weakKeys().build()

    /**
     * Two level map. Domain object -> extension space name -> whether the space recognizes the domain object.
     */
    private val bizRecognizerResultCache: Cache<Any, ConcurrentHashMap<String, Boolean>> =
            CacheBuilder.newBuilder().weakKeys().build()

    /**
     * Extension space name to data initializer map.
     */
    private val extSpaceNameToDataExtInitializer: ConcurrentHashMap<String, YanwteDataExtensionInitializer> =
            ConcurrentHashMap()

    /**
     * Extension space name to biz recognizer map.
     */
    private val extSpaceNameToBizRecognizer: ConcurrentHashMap<String, YanwteBizRecognizer> =
            ConcurrentHashMap()

    /**
     * Extension space name to instance map.
     */
    private val nameToExtSpace = ConcurrentHashMap<String, YanwteExtensionSpace>()

    /**
     * Clear this container.
     */
    internal fun clear() {
        nameToExtension.clear()
        nameToExtPoint.clear()
        dataExtensionCache.cleanUp()
        bizRecognizerResultCache.cleanUp()
        extSpaceNameToDataExtInitializer.clear()
        extSpaceNameToBizRecognizer.clear()
        nameToExtSpace.clear()
    }

    internal fun cacheDataExtension(dataExtensionPoint: Any, extensionSpaceName: String, dataExtension: Any) {
        dataExtensionCache.get(dataExtensionPoint) {
            ConcurrentHashMap()
        }.let { secMap ->
            secMap[extensionSpaceName] = dataExtension
        }
    }

    internal fun getDataExtension(dataExtensionPoint: Any, extensionSpaceName: String): Any? {
        return dataExtensionCache.get(dataExtensionPoint) {
            ConcurrentHashMap()
        }.let { secMap ->
            secMap[extensionSpaceName]
        }
    }

    internal fun cacheBizRecognizerResult(domainObject: Any, extensionSpaceName: String, result: Boolean) {
        bizRecognizerResultCache.get(domainObject) {
            ConcurrentHashMap()
        }.let {
            it[extensionSpaceName] = result
        }
    }

    internal fun getBizRecognizerResult(domainObject: Any, extensionSpaceName: String): Boolean? {
        return bizRecognizerResultCache.get(domainObject) {
            ConcurrentHashMap()
        }.let {
            it[extensionSpaceName]
        }
    }

    /**
     * Register extension.
     */
    private fun registerYanwteExtension(extension: YanwteExtension) {
        nameToExtension[extension.name] = extension

        val extSpaceName = extension.extensionSpaceName
        getExtensionSpaceByName(extSpaceName) ?: run {
            extension.pojoExtension!!.javaClass.classLoader.let {
                try {
                    it.loadClass("$extSpaceName.ExtensionSpace").let {
                        it.newInstance().let {
                            it as YanwteExtensionSpace
                        }
                    }
                } catch (e: ClassNotFoundException) {
                    AutoGeneratedExtensionSpace()
                }
            }.apply {
                initialize(extSpaceName)
            }.let {
                registerExtensionSpace(extSpaceName, it)
            }
        }
    }

    /**
     * Returns the extension with the given name, and null if no match.
     */
    internal fun getExtensionByName(name: String): YanwteExtension? {
        return nameToExtension[name]
    }

    /**
     * Register the given extension point. This process registers all the dependent extensions
     * of the given extension point.
     */
    private fun registerExtensionPoint(extensionPoint: ExtensionPoint) {
        nameToExtPoint[extensionPoint.name] = extensionPoint

        extensionPoint.combinator.collectDependentExtensions().forEach {
            registerYanwteExtension(it)
        }
    }

    /**
     * Get the extension point matching the given name.
     */
    internal fun getExtensionPointByName(name: String): ExtensionPoint? {
        return nameToExtPoint[name]
    }

    /**
     * Returns the POJO extension point instance by the given POJO extension point
     * interface class.
     */
    fun <T : Any> getExtensionPointByClass(extensionPointInterfaceClass: Class<T>): T? {
        extensionPointInterfaceClass.name.let {
            nameToExtPoint[it].let {
                val extensionPoint = it ?: findExtensionPointProvider(extensionPointInterfaceClass).let {
                    it.getExtensionPoint().apply {
                        registerExtensionPoint(this)
                    }
                }

                extensionPoint.pojoExtensionPoint?.let {
                    @Suppress("UNCHECKED_CAST")
                    return it as T
                }

                generateExtensionPointDelegate(
                        extensionPoint,
                        extensionPointInterfaceClass
                ).let { delegate ->
                    extensionPoint.pojoExtensionPoint = delegate
                    return delegate
                }
            }
        }
    }

    private fun <T> findExtensionPointProvider(extensionPointInterfaceClass: Class<T>): ExtensionPointProvider {
        return extensionPointInterfaceClass.classLoader.let {
            try {
                it.loadClass("${extensionPointInterfaceClass.name}Provider")
            } catch (e: ClassNotFoundException) {
                throw YanwteException("Cannot find provider for ${extensionPointInterfaceClass.name}", e)
            }.let { providerClass ->
                providerClass.newInstance() as ExtensionPointProvider
            }
        }
    }

    /**
     * Returns the extension space instance of the given name.
     */
    internal fun getExtensionSpaceByName(name: String): YanwteExtensionSpace? {
        return nameToExtSpace[name]
    }

    /**
     * Register the extension space with the given name.
     */
    private fun registerExtensionSpace(name: String, space: YanwteExtensionSpace) {
        nameToExtSpace[name] = space

        extSpaceNameToDataExtInitializer[name].onNull {
            createDataExtInitializer(space).let {
                extSpaceNameToDataExtInitializer[name] = it
            }
        }

        extSpaceNameToBizRecognizer[name].onNull {
            createBizRecognizer(space)?.let {
                extSpaceNameToBizRecognizer[name] = it
            }
        }
    }

    private fun createBizRecognizer(space: YanwteExtensionSpace): YanwteBizRecognizer? {
        return space.javaClass.classLoader.let {
            try {
                @Suppress("UNCHECKED_CAST")
                (it.loadClass("${space.name}.BizRecognizer") as Class<YanwteBizRecognizer>)
            } catch (e: ClassNotFoundException) {
                null
            }
        }?.let {
            it.newInstance()
        }
    }

    internal fun createDataExtInitializer(space: YanwteExtensionSpace): YanwteDataExtensionInitializer {
        return space.javaClass.classLoader.let {
            try {
                @Suppress("UNCHECKED_CAST")
                (it.loadClass("${space.name}.DataExtensionInitializer")
                        as Class<YanwteDataExtensionInitializer>)
            } catch (e: ClassNotFoundException) {
                null
            }
        }?.let {
            it.newInstance()
        }.let {
            it ?: EmptyDataExtensionInitializer
        }
    }

    /**
     * Get the data extension initializer of the given extension space.
     */
    internal fun getDataExtInitializer(extensionSpaceName: String): YanwteDataExtensionInitializer {
        return extSpaceNameToDataExtInitializer[extensionSpaceName]!!
    }

    /**
     * Get the biz recognizer of the given extension space.
     */
    internal fun getBizRecognizer(extensionSpaceName: String): YanwteBizRecognizer? {
        return extSpaceNameToBizRecognizer[extensionSpaceName]
    }
}